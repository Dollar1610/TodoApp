// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Body /> snapshot for Body component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <nav
    className="level is-mobile"
>
    <div
        className="level-item has-text-centered"
    >
        <div
            className="application field"
        >
            <InputText
                error={false}
                id="inputText"
                inputClass="application_input input"
                inputRef={[Function]}
            />
            <ListItems
                items={Array []}
            />
            <Buttons
                buttonName="Add"
                event={[Function]}
            />
            <Buttons
                buttonName="Remove"
                event={[Function]}
            />
        </div>
    </div>
</nav>,
  "nodes": Array [
    <nav
      className="level is-mobile"
>
      <div
            className="level-item has-text-centered"
      >
            <div
                  className="application field"
            >
                  <InputText
                        error={false}
                        id="inputText"
                        inputClass="application_input input"
                        inputRef={[Function]}
                  />
                  <ListItems
                        items={Array []}
                  />
                  <Buttons
                        buttonName="Add"
                        event={[Function]}
                  />
                  <Buttons
                        buttonName="Remove"
                        event={[Function]}
                  />
            </div>
      </div>
</nav>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Body />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Body {
        "_reactInternalInstance": [Circular],
        "addItem": [Function],
        "context": Object {},
        "deleteItem": [Function],
        "inputRef": [Function],
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "error": false,
          "inputClass": "application_input input",
          "items": Array [],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <nav
          className="level is-mobile"
>
          <div
                    className="level-item has-text-centered"
          >
                    <div
                              className="application field"
                    >
                              <InputText
                                        error={false}
                                        id="inputText"
                                        inputClass="application_input input"
                                        inputRef={[Function]}
                              />
                              <ListItems
                                        items={Array []}
                              />
                              <Buttons
                                        buttonName="Add"
                                        event={[Function]}
                              />
                              <Buttons
                                        buttonName="Remove"
                                        event={[Function]}
                              />
                    </div>
          </div>
</nav>,
        "_debugID": 2,
        "_renderedOutput": <nav
          className="level is-mobile"
>
          <div
                    className="level-item has-text-centered"
          >
                    <div
                              className="application field"
                    >
                              <InputText
                                        error={false}
                                        id="inputText"
                                        inputClass="application_input input"
                                        inputRef={[Function]}
                              />
                              <ListItems
                                        items={Array []}
                              />
                              <Buttons
                                        buttonName="Add"
                                        event={[Function]}
                              />
                              <Buttons
                                        buttonName="Remove"
                                        event={[Function]}
                              />
                    </div>
          </div>
</nav>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Body />,
}
`;
